import {
    add, addList,
    explode,
    explodeNumber, getMagnitude, reduce, replaceWithMagnitude, split,

} from "./day18";

const explodeCases: [string, string][] = [
    ["[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]"],
    ["[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]"],
    ["[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]"],
    ["[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"],
    ["[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"],
    ["[[[[0,7],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[15,[0,13]]],[1,1]]"]
]

test.each(explodeCases)(`string %s explodes to %s`, (input, expected) => {
    const [_, output] = explode(input)
    expect(output).toBe(expected)
})

const splitCases: [string, string][] = [
    ["[[[[0,7],4],[15,[0,13]]],[1,1]]", "[[[[0,7],4],[[7,8],[0,13]]],[1,1]]"],
    ["[[[[0,7],4],[[7,8],[0,13]]],[1,1]]", "[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]"],
]

test.each(splitCases)(`string %s splits to %s`, (input, expected) => {
    const [_, output] = split(input)
    expect(output).toBe(expected)
})

test('reduces', () => {
    expect(reduce("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]")).toBe("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")
});

test('adds', () => {
    expect(add("[[[[4,3],4],4],[7,[[8,4],9]]]", "[1,1]")).toBe("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")
})

test('adds list', () => {
    expect(addList(`[1,1]
[2,2]
[3,3]
[4,4]`.split('\n'))).toBe("[[[[1,1],[2,2]],[3,3]],[4,4]]")

})

test('adds again', () => {
    expect(add("[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]", "[2,9]")).toBe("[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]");

})

test('adds again2', () => {
    expect(add("[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]", "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]")).toBe("[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]");

})

test('adds list 2', () => {
    const result = addList(`[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]`.split('\n'))
    expect(result).toBe("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")

})

test('mag', ()=>{
    let input = "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]"

    let found = true

    while(found){
        [found, input] = replaceWithMagnitude(input)
    }

   expect(input).toBe("4140")
})

test('part one works', ()=>{
    const result = addList(`[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`.split('\n'))

    expect(getMagnitude(result)).toBe(4140)
})


